apply plugin: 'com.android.application'

def keystorePropertiesFile = rootProject.file("keystore/keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    //Android 6.0 release removes support for the Apache HTTP client
    // 为了编译Volley源码需要加上,会将org.apache.http相关代码打入包体
    useLibrary 'org.apache.http.legacy'

    compileSdkVersion demoCompileSdkVersion

    defaultConfig {
        applicationId "com.leo.demo"
        minSdkVersion demoMinSdkVersion
        targetSdkVersion demoTargetSdkVersion
        versionCode 1
        versionName "1.0"
        multiDexEnabled false
    }

    signingConfigs {
        releaseSign {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.releaseSign
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            res.srcDirs('src/main/res', 'src/main/res_scroll_drag')
            jniLibs.srcDirs = ['libs']
        }
        debug {
            java.srcDirs = ['src/main/java_debug']
        }
        release {
            java.srcDirs = ['src/main/java_release']
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            outputFileName = "${project.name}_${variant.name}_${new Date().format("yyyyMMddHHmm", TimeZone.getTimeZone("GMT+8"))}.apk"
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])

    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'

    implementation 'com.android.support:support-v4:28.0.0'
    implementation 'com.android.support:design:28.0.0'
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.5.1'
    //    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.1'
    debugImplementation 'com.facebook.stetho:stetho:1.5.1'
    debugImplementation 'com.facebook.stetho:stetho-okhttp3:1.5.1'
    implementation project(path: ':utils')
//    releaseImplementation "net.igenius:stetho-no-op:1.1"
}

class AppTimingsListener implements TaskExecutionListener {

    @Override
    void beforeExecute(Task task) {
        String projectDir = task.getProject().projectDir.getAbsolutePath()
        def apkDir = projectDir + "\\build\\outputs\\apk\\"

        if (task.getPath().endsWith("packageDebug")) {
            apkDir += "debug"
            task.getProject().getRootProject().deleteFile(apkDir)
        } else if (task.getPath().endsWith("packageRelease")) {
            apkDir += "release"
            task.getProject().getRootProject().deleteFile(apkDir)
        }
    }

    @Override
    void afterExecute(Task task, TaskState state) {

    }
}

gradle.addListener new AppTimingsListener()

task testOrder() {
    log getPath()
    android.applicationVariants.all { variant ->
        println "demo buildType：" + variant.name
    }
}
